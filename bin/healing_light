#!/usr/bin/env ruby

# resolve bin path, ignoring symlinks
require "pathname"
bin_file = Pathname.new(__FILE__).realpath

# add self to libpath
$:.unshift File.expand_path("../../lib", bin_file)

require 'healing_light'
require 'healing_light/cli'
require 'gli'

include GLI::App
include HealingLight::CLI

program_desc 'Come bathe in the healing light!'

flag [:strip], default_value: 'LPD8806'
flag [:count], default_value: 32
flag [:dev], default_value: '/dev/spidev0.0'
flag [:c,:color], default_value: 'ffffff', must_match: /[0-9A-Fa-f]{2}{3}/

pre do |globals,command,opts,args|
  $strip = strip globals
  $color = rgb_hex_to_a(globals[:color])
end

desc "Do something to all lights at once"
command :all do |c|

  c.command :on do |sc|
    sc.action do |globals,opts,args|
      $strip.extend HealingLight::Control::All
      $strip.all_on($color)
    end
  end

  c.command :off do |sc|
    sc.action do |globals,opts,args|
      $strip.all_off
    end
  end
end

desc "Chase a light down the strip"
command :chase do |c|

  c.desc 'Which direction should that chase start?'
  c.flag [:d,:direction],
    default_value: 'up_down',
    must_match: %W{up down up_down}

  c.command :trails do |sc|
    sc.action do |globals,opts,args|
      $strip.extend HealingLight::Control::Chase
      chase('trailer',*$color,opts)
    end
  end

  c.command :dot do |sc|
    sc.action do |globals,opts,args|
      $strip.extend HealingLight::Control::Chase
      chase('dot',*$color,opts)
    end
  end
end

exit run(ARGV)

# vim ft=ruby
